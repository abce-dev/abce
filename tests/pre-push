#!/bin/bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
    if [ "$local_sha" = $z40 ]
    then
        # Handle delete
        :
    else
        if [ "$remote_sha" = $z40 ]
        then
            # New branch, examine all commits
            range="$local_sha"
        else
            # Update to existing branch, examine new commits
            range="$remote_sha..$local_sha"
        fi
    fi

    # Check for ABCE_DIR environment variable
    if [ -z "${ABCE_DIR+x}" ]; then
        echo "Environment variable \$ABCE_DIR is unset."
        echo "Using the current directory as the ABCE top-level directory."
        echo "To avoid this message, please set \$ABCE_DIR to point to the ABCE directory which contains run.py."
        $ABCE_DIR="."
    fi

    # Set test directory
    test_dir_path="$ABCE_DIR/tests"

    # List of calls for tests to run
    # Add additional tests on subsequent lines inside the
    #   parentheses, separated only by returns (no commas
    #   or semicolons)
    tests_to_run=("bash $test_dir_path/crash_test.sh $ABCE_DIR/run.py"
                  "echo \"Tests complete.\n\n\"")
    IFS=""

    # Explain the pre-push test to the user
    echo "ABCE will be tested before the push continues."
    echo "Current tests:"
    echo "  - Crash test\n\n\n"

    # Run all tests
    for cmd in ${tests_to_run[*]}
    do
        # Run the test
        eval "$cmd"

        # Exit without completing the push if the return code
        #   is nonzero
        if [ $? -ne 0 ]
        then
            echo "Test unsuccessful; aborting push."
            exit 1
        else
            echo "Test successful; proceeding to push.\n\n"
        fi
    done
done

exit 0
