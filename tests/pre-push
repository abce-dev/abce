#!/bin/bash

# A hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This hook executes all tests whose commands are specified in the 
# $tests_to_run array. To add new tests, simply extend the array (inside
# the parentheses) using newlines, like this:
#
# tests_to_run=("bash $test_cmd_1"
#               "bash $test_cmd_2"
#               "python3 $test_cmd_3")
#
# All new tests should be created as scripts and stored in the /tests/ dir.

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do

    ### GIT WIZARDRY, DO NOT EDIT

    if [ "$local_sha" = $z40 ]
    then
        # Handle delete
        :
    else
        if [ "$remote_sha" = $z40 ]
        then
            # New branch, examine all commits
            range="$local_sha"
        else
            # Update to existing branch, examine new commits
            range="$remote_sha..$local_sha"
        fi
    fi

    ### TESTS BEGIN HERE

    # Check for ABCE_DIR environment variable
    if [ -z "${ABCE_DIR+x}" ]; then
        printf "Environment variable \$ABCE_DIR is unset.\n"
        printf "Please set \$ABCE_DIR to point to the ABCE directory which contains run.py.\n"
        printf "Aborting..."
        exit 1
    fi

    # List of calls for tests to run
    # Add additional tests on subsequent lines inside the
    #   parentheses, separated only by returns (no commas
    #   or semicolons)
    tests_to_run=("bash $ABCE_DIR/tests/crash_test.sh")
    IFS=""

    # Explain the pre-push test to the user
    printf "ABCE will be tested before the push continues.\n"
    printf "Current tests:\n"
    printf "  - Crash test\n\n\n\n"

    # Run all tests
    for cmd in ${tests_to_run[*]}
    do
        # Run the test
        eval "$cmd"

        # Exit without completing the push if the return code
        #   is nonzero
        if [ $? -ne 0 ]
        then
            printf "Test unsuccessful; aborting push.\n"
            exit 1
        else
            printf "Test successful.\n\n"
        fi
    done

    # If nothing has gone wrong yet, then all tests have passed
    printf "All tests passed. Proceeding to Git push...\n\n\n"
done

exit 0
